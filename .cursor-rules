# Reglas de Desarrollo - Impostor Game

## üìã Principios Fundamentales

### Formateo y Estilo
- **Utiliza siempre la tabulaci√≥n para formatear el c√≥digo**
- Mant√©n consistencia en la indentaci√≥n (2 espacios para TypeScript/React)
- Usa nombres descriptivos para variables, funciones y componentes
- Sigue las convenciones de naming de React (PascalCase para componentes, camelCase para funciones)

### Simplicidad y Mantenibilidad
- **Prioriza siempre soluciones simples**
- Evita over-engineering; implementa solo lo necesario
- Prefiere composici√≥n sobre herencia
- Mant√©n funciones peque√±as y con una sola responsabilidad

### Gesti√≥n de Cambios
- **Despu√©s de realizar cambios, SIEMPRE aseg√∫rate de iniciar un nuevo servidor para que puedan probarse** (en caso de que sea necesario)
- Verifica que el desarrollo server funcione correctamente despu√©s de cambios importantes
- Usa `npm run dev` para probar cambios localmente

### Limpieza de C√≥digo
- **Mata siempre todos los servidores relacionados que hayan sido creados en pruebas anteriores antes de iniciar un nuevo servidor**
- Cierra procesos de desarrollo previos antes de iniciar nuevos
- Limpia dependencias no utilizadas regularmente

### Reutilizaci√≥n y DRY
- **Busca siempre c√≥digo existente para iterar en lugar de crear nuevo c√≥digo desde cero**
- Revisa componentes existentes antes de crear nuevos
- Reutiliza hooks, utilities y componentes cuando sea posible
- Mant√©n un directorio `lib/` organizado con utilidades reutilizables

### Prevenci√≥n de Duplicaci√≥n
- **Evita la duplicaci√≥n de c√≥digo siempre que sea posible**
- Revisa si ya existe una parte del c√≥digo con l√≥gica o funcionalidad similar
- Extrae l√≥gica com√∫n en hooks personalizados o utilities
- Usa TypeScript interfaces para evitar duplicaci√≥n de tipos

### Consideraci√≥n de Entornos
- **Escribe c√≥digo que tenga en cuenta los diferentes entornos: desarrollo, pruebas y producci√≥n**
- Usa variables de entorno apropiadas (.env.local, .env.example)
- Configura diferentes comportamientos para desarrollo vs producci√≥n
- Considera el rendimiento en producci√≥n desde el desarrollo

### Enfoque en Requerimientos
- **Aseg√∫rate de hacer solo los cambios solicitados o aquellos en los que tengas plena confianza de que est√°n bien comprendidos y est√°n relacionados con la solicitud**
- Lee cuidadosamente los requerimientos antes de implementar
- Pregunta por clarificaciones si algo no est√° claro
- Mant√©n el scope de cambios enfocado y controlado

### Manejo de Errores y Bugs
- **Al corregir un error o bug, no introduzcas un nuevo patr√≥n o tecnolog√≠a sin antes haber agotado todas las opciones con la implementaci√≥n actual**
- Intenta solucionar con las herramientas y patrones existentes primero
- **Si finalmente decides hacerlo, aseg√∫rate de eliminar la implementaci√≥n anterior para evitar l√≥gica duplicada**
- Documenta los cambios importantes en commits descriptivos

### Organizaci√≥n y Estructura
- **Mant√©n la base de c√≥digo limpia y bien organizada**
- Organiza archivos en directorios l√≥gicos (components/, hooks/, lib/, etc.)
- Usa barrel exports (index.ts) cuando sea apropiado
- Mant√©n imports organizados y agrupados

### Scripts y Automatizaci√≥n
- **Evita escribir scripts directamente en archivos si es posible, especialmente si ese script solo se va a ejecutar una vez**
- Prefiere comandos npm/yarn scripts en package.json
- Usa herramientas de desarrollo apropiadas (ESLint, Prettier, TypeScript)
- Automatiza tareas repetitivas cuando sea posible

### Documentaci√≥n y Archivos
- **NO crear tantos archivos .md con instrucciones**
- Mant√©n la documentaci√≥n m√≠nima y esencial
- Prefiere comentarios en c√≥digo sobre documentaci√≥n externa
- Solo crea archivos README cuando sea absolutamente necesario

### Seguridad y Variables de Entorno
- **Utiliza SIEMPRE variables de entorno para datos sensibles**
- NUNCA hardcodees API keys, passwords, tokens o URLs de producci√≥n
- **Aseg√∫rate de que las variables de entorno sean ignoradas en git**
- Usa archivos .env.local para desarrollo (ya incluido en .gitignore)
- Proporciona archivos .env.example con valores de ejemplo (sin datos reales)
- Valida que todas las variables sensibles est√©n en .gitignore

## üõ†Ô∏è Espec√≠fico para este Proyecto

### Stack Tecnol√≥gico
- **Next.js 14** con App Router
- **TypeScript** para type safety
- **Tailwind CSS** para estilos
- **Shadcn/ui** para componentes
- **Supabase** para backend y base de datos

### Estructura de Componentes
```
components/
‚îú‚îÄ‚îÄ ui/           # Componentes base de shadcn/ui
‚îú‚îÄ‚îÄ game-*.tsx    # Componentes espec√≠ficos del juego
‚îî‚îÄ‚îÄ shared/       # Componentes reutilizables
```

### Patrones de Estado
- Usa React hooks para estado local
- Implementa Context API para estado global cuando sea necesario
- Considera Zustand para estado m√°s complejo si es requerido

### Supabase Integration
- Usa el hook `useSupabase` para autenticaci√≥n
- Implementa Row Level Security (RLS) en las tablas
- Genera tipos TypeScript desde el schema de Supabase

### Testing y Calidad
- Ejecuta `npm run lint` antes de commits importantes
- Usa TypeScript strict mode
- Valida props con interfaces TypeScript

## üöÄ Comandos √ötiles

```bash
# Desarrollo
npm run dev

# Linting
npm run lint

# Build para producci√≥n
npm run build

# Supabase local
npm run supabase:start
npm run supabase:generate-types
```

## üìù Notas Importantes

- Siempre revisar que los cambios no rompan la funcionalidad existente
- Mantener consistencia con el dise√±o y UX establecido
- Priorizar la experiencia del usuario final
- Documentar decisiones t√©cnicas importantes en commits o comentarios
